// <auto-generated />
using System;
using Iter.Infrastrucure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Iter.Infrastructure.Migrations
{
    [DbContext(typeof(IterContext))]
    [Migration("20240901231441_Seed2")]
    partial class Seed2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Iter.Core.EntityModels.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HotelAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HotelAddressId");

                    b.ToTable("Accommodation", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("462e18e6-5009-43b5-15be-08dc298c5934"),
                            CityId = 101,
                            CreatedAt = new DateTime(2024, 2, 9, 17, 37, 28, 33, DateTimeKind.Unspecified).AddTicks(5556),
                            HouseNumber = "99",
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 6, 1, 14, 5, 34, 722, DateTimeKind.Unspecified).AddTicks(2045),
                            PostalCode = "1234",
                            Street = "Ivana krndelja"
                        },
                        new
                        {
                            Id = new Guid("8af7c2da-c52a-4322-b2d7-08dc37b68f24"),
                            CityId = 101,
                            CreatedAt = new DateTime(2024, 2, 27, 18, 7, 20, 446, DateTimeKind.Unspecified).AddTicks(9789),
                            HouseNumber = "99",
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 8, 20, 22, 28, 37, 937, DateTimeKind.Unspecified).AddTicks(1298),
                            PostalCode = "74000",
                            Street = "uLICA MARSALA TITA"
                        },
                        new
                        {
                            Id = new Guid("39c6bbd9-57a1-4b5a-3d83-08dc8233593d"),
                            CityId = 104,
                            CreatedAt = new DateTime(2024, 6, 1, 14, 7, 3, 125, DateTimeKind.Unspecified).AddTicks(7525),
                            HouseNumber = "55",
                            IsDeleted = false,
                            ModifiedAt = new DateTime(2024, 8, 23, 23, 48, 15, 975, DateTimeKind.Unspecified).AddTicks(3442),
                            PostalCode = "77000",
                            Street = "Ulica Ivana krndelja"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ImageId");

                    b.ToTable("Agency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("66f20b4e-9e6d-4c95-6a66-08dc298d67da"),
                            AddressId = new Guid("462e18e6-5009-43b5-15be-08dc298c5934"),
                            ContactEmail = "letsgo@gmail.com",
                            ContactPhone = "062-123-123",
                            CreatedAt = new DateTime(2024, 2, 9, 17, 37, 25, 271, DateTimeKind.Unspecified).AddTicks(2606),
                            IsActive = false,
                            IsDeleted = false,
                            LicenseNumber = "12343",
                            ModifiedAt = new DateTime(2024, 6, 1, 14, 5, 34, 722, DateTimeKind.Unspecified).AddTicks(5465),
                            Name = "Letsgo",
                            Rating = 3.08m,
                            Website = "www.letsgo.com"
                        },
                        new
                        {
                            Id = new Guid("62f78fa6-4e5e-4420-a91d-08dc37b68f22"),
                            AddressId = new Guid("8af7c2da-c52a-4322-b2d7-08dc37b68f24"),
                            ContactEmail = "pohodi@gmail.com",
                            ContactPhone = "062-123-1234",
                            CreatedAt = new DateTime(2024, 2, 27, 18, 7, 20, 447, DateTimeKind.Unspecified).AddTicks(3028),
                            IsActive = false,
                            IsDeleted = false,
                            LicenseNumber = "1234",
                            ModifiedAt = new DateTime(2024, 8, 20, 22, 28, 37, 937, DateTimeKind.Unspecified).AddTicks(2096),
                            Name = "Studentski pohodi",
                            Rating = 0.00m,
                            Website = "www.pohodi.com"
                        },
                        new
                        {
                            Id = new Guid("1b73b899-6578-4120-0caf-08dc8233593a"),
                            AddressId = new Guid("39c6bbd9-57a1-4b5a-3d83-08dc8233593d"),
                            ContactEmail = "trans.tourist@gmail.com",
                            ContactPhone = "035-882-085",
                            CreatedAt = new DateTime(2024, 6, 1, 14, 7, 3, 125, DateTimeKind.Unspecified).AddTicks(7917),
                            IsActive = false,
                            IsDeleted = false,
                            LicenseNumber = "01475214",
                            ModifiedAt = new DateTime(2024, 8, 23, 23, 48, 15, 975, DateTimeKind.Unspecified).AddTicks(9403),
                            Name = "Trans turist",
                            Rating = 0.00m,
                            Website = "www.transtourist.com"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Arrangement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ArrangementStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ArrangementStatusId");

                    b.ToTable("Arrangement", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrangementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("ImageId");

                    b.ToTable("ArrangementImage", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccommodationType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ArrangementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.ToTable("ArrangementPrice", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ArrangementStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "U Pripremi"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Dostupan za Rezervaciju"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rezervacije Zatvorene"
                        },
                        new
                        {
                            Id = 10,
                            Name = "U Pripremi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "U Pripremi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "U Pripremi"
                        },
                        new
                        {
                            Id = 13,
                            Name = "U Pripremi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "U Pripremi"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidencePlace")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fda36cb7-4616-48e9-cf2a-08dc728077ad"),
                            BirthDate = new DateTime(2001, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 12, 14, 38, 46, 817, DateTimeKind.Unspecified).AddTicks(1754),
                            FirstName = "Klijent",
                            IsDeleted = false,
                            LastName = "Mujic",
                            ModifiedAt = new DateTime(2024, 5, 22, 0, 47, 41, 807, DateTimeKind.Unspecified).AddTicks(7223),
                            ResidencePlace = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("6240d8f1-b80d-49e3-77d0-08dc8003d380"),
                            BirthDate = new DateTime(1999, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 29, 19, 33, 4, 985, DateTimeKind.Unspecified).AddTicks(3286),
                            FirstName = "Admir",
                            IsDeleted = false,
                            LastName = "Numanović",
                            ModifiedAt = new DateTime(2024, 5, 29, 19, 35, 3, 925, DateTimeKind.Unspecified).AddTicks(4234),
                            ResidencePlace = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("20affdb3-aa89-4387-d057-08dc9dc24d12"),
                            BirthDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 7, 6, 15, 48, 22, 101, DateTimeKind.Unspecified).AddTicks(4672),
                            FirstName = "Tajib",
                            IsDeleted = false,
                            LastName = "Vikalo",
                            ModifiedAt = new DateTime(2024, 7, 6, 15, 48, 22, 101, DateTimeKind.Unspecified).AddTicks(5430),
                            ResidencePlace = "Srebreni"
                        },
                        new
                        {
                            Id = new Guid("52c17ce6-c3c2-49f8-246f-08dc9dc44f56"),
                            BirthDate = new DateTime(1999, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 7, 6, 16, 2, 44, 904, DateTimeKind.Unspecified).AddTicks(6235),
                            FirstName = "Tajib",
                            IsDeleted = false,
                            LastName = "Tajci",
                            ModifiedAt = new DateTime(2024, 7, 6, 16, 2, 44, 904, DateTimeKind.Unspecified).AddTicks(6632),
                            ResidencePlace = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("e61d7eee-9996-4dd5-b987-37f10bddb38c"),
                            BirthDate = new DateTime(1965, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Pat",
                            IsDeleted = false,
                            LastName = "Anderson",
                            ModifiedAt = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "San Jose"
                        },
                        new
                        {
                            Id = new Guid("157d8713-1176-4050-b53f-49e38670337a"),
                            BirthDate = new DateTime(1985, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Johnson",
                            ModifiedAt = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Chicago"
                        },
                        new
                        {
                            Id = new Guid("8fd6aa7e-2afa-402b-a05c-541ab2ddbc5a"),
                            BirthDate = new DateTime(1970, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sam",
                            IsDeleted = false,
                            LastName = "Wilson",
                            ModifiedAt = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "San Antonio"
                        },
                        new
                        {
                            Id = new Guid("c2f846f6-c807-404b-a803-9f1e26e1bdd2"),
                            BirthDate = new DateTime(1988, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Laura",
                            IsDeleted = false,
                            LastName = "Miller",
                            ModifiedAt = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Philadelphia"
                        },
                        new
                        {
                            Id = new Guid("1eb9eee6-d946-4111-a2e6-a3a67445ad97"),
                            BirthDate = new DateTime(1992, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mike",
                            IsDeleted = false,
                            LastName = "Davis",
                            ModifiedAt = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Phoenix"
                        },
                        new
                        {
                            Id = new Guid("0523fca9-d9bd-4e14-98f5-aa73c208a274"),
                            BirthDate = new DateTime(1990, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            ModifiedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Los Angeles"
                        },
                        new
                        {
                            Id = new Guid("67be2123-c0ad-4b94-a4c3-cbfe002a7313"),
                            BirthDate = new DateTime(1999, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adnann",
                            IsDeleted = false,
                            LastName = "Numanovic",
                            ModifiedAt = new DateTime(2024, 8, 24, 18, 0, 25, 468, DateTimeKind.Unspecified).AddTicks(6081),
                            ResidencePlace = "Tuzla"
                        },
                        new
                        {
                            Id = new Guid("5780ee88-d758-4ead-861a-cd19e001bf3d"),
                            BirthDate = new DateTime(1975, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IsDeleted = false,
                            LastName = "Brown",
                            ModifiedAt = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Houston"
                        },
                        new
                        {
                            Id = new Guid("fd72d7b7-a9e8-4740-b370-e3a2a33d61df"),
                            BirthDate = new DateTime(1995, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Chris",
                            IsDeleted = false,
                            LastName = "Taylor",
                            ModifiedAt = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Dallas"
                        },
                        new
                        {
                            Id = new Guid("534322c0-4ea4-488a-946c-e67d044ba637"),
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            ModifiedAt = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "New York"
                        },
                        new
                        {
                            Id = new Guid("7f5734f6-d8e6-4d66-82d4-f1f7da73a6d3"),
                            BirthDate = new DateTime(1983, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kate",
                            IsDeleted = false,
                            LastName = "Moore",
                            ModifiedAt = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "San Diego"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrangementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneDayTrip")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("CityId");

                    b.ToTable("Destination", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResidencePlace")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ec6edeb-02b6-4c4f-139d-08dc2fe46497"),
                            AgencyId = new Guid("66f20b4e-9e6d-4c95-6a66-08dc298d67da"),
                            BirthDate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Test",
                            IsDeleted = true,
                            LastName = "Test",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ResidencePlace = "Zenica"
                        },
                        new
                        {
                            Id = new Guid("16cda006-dc9c-4071-012e-08dc81a7b237"),
                            AgencyId = new Guid("62f78fa6-4e5e-4420-a91d-08dc37b68f22"),
                            BirthDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 31, 21, 27, 6, 984, DateTimeKind.Unspecified).AddTicks(6437),
                            FirstName = "Hašim",
                            IsDeleted = false,
                            LastName = "Vodič",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 31, 53, 599, DateTimeKind.Unspecified).AddTicks(4486),
                            ResidencePlace = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("d0903cb4-e560-4547-37b0-08dc95e40210"),
                            AgencyId = new Guid("62f78fa6-4e5e-4420-a91d-08dc37b68f22"),
                            BirthDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 6, 26, 15, 29, 29, 895, DateTimeKind.Unspecified).AddTicks(3378),
                            FirstName = "Koordinator",
                            IsDeleted = false,
                            LastName = "Koordinatorić",
                            ModifiedAt = new DateTime(2024, 6, 26, 15, 29, 29, 895, DateTimeKind.Unspecified).AddTicks(3806),
                            ResidencePlace = "Mostar"
                        },
                        new
                        {
                            Id = new Guid("e9605352-c3f4-4568-a312-08dcc51a8157"),
                            AgencyId = new Guid("66f20b4e-9e6d-4c95-6a66-08dc298d67da"),
                            BirthDate = new DateTime(1999, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 8, 25, 17, 28, 0, 858, DateTimeKind.Unspecified).AddTicks(527),
                            FirstName = "Izet",
                            IsDeleted = false,
                            LastName = "Vodič",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 32, 13, 390, DateTimeKind.Unspecified).AddTicks(8083),
                            ResidencePlace = "Ribnica Mujići"
                        },
                        new
                        {
                            Id = new Guid("0403e6d4-7cfe-4f25-a313-08dcc51a8157"),
                            AgencyId = new Guid("66f20b4e-9e6d-4c95-6a66-08dc298d67da"),
                            BirthDate = new DateTime(2000, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 8, 25, 17, 31, 14, 161, DateTimeKind.Unspecified).AddTicks(5638),
                            FirstName = "Mujo",
                            IsDeleted = false,
                            LastName = "Vodič",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 45, 20, 188, DateTimeKind.Unspecified).AddTicks(8628),
                            ResidencePlace = "Vrapčići"
                        },
                        new
                        {
                            Id = new Guid("f6fe658e-37f8-4a52-a314-08dcc51a8157"),
                            AgencyId = new Guid("1b73b899-6578-4120-0caf-08dc8233593a"),
                            BirthDate = new DateTime(1994, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 8, 25, 17, 32, 57, 584, DateTimeKind.Unspecified).AddTicks(2989),
                            FirstName = "Elvir",
                            IsDeleted = false,
                            LastName = "Vodič",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 32, 57, 584, DateTimeKind.Unspecified).AddTicks(3113),
                            ResidencePlace = "Bugojno"
                        },
                        new
                        {
                            Id = new Guid("027d20a4-dcc3-4aee-a315-08dcc51a8157"),
                            AgencyId = new Guid("1b73b899-6578-4120-0caf-08dc8233593a"),
                            BirthDate = new DateTime(2005, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 8, 25, 17, 34, 7, 158, DateTimeKind.Unspecified).AddTicks(8909),
                            FirstName = "Mustafa",
                            IsDeleted = false,
                            LastName = "Koordinator",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 34, 7, 158, DateTimeKind.Unspecified).AddTicks(8993),
                            ResidencePlace = "Ribnica"
                        },
                        new
                        {
                            Id = new Guid("755fc934-044c-40e2-a316-08dcc51a8157"),
                            AgencyId = new Guid("66f20b4e-9e6d-4c95-6a66-08dc298d67da"),
                            BirthDate = new DateTime(1997, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 8, 25, 17, 36, 31, 519, DateTimeKind.Unspecified).AddTicks(4870),
                            FirstName = "Ramo",
                            IsDeleted = false,
                            LastName = "Koordinator",
                            ModifiedAt = new DateTime(2024, 8, 25, 17, 36, 31, 519, DateTimeKind.Unspecified).AddTicks(4931),
                            ResidencePlace = "Ribnica"
                        },
                        new
                        {
                            Id = new Guid("8b778d69-5d48-4690-8d8a-945c7fb250b1"),
                            AgencyId = new Guid("62f78fa6-4e5e-4420-a91d-08dc37b68f22"),
                            BirthDate = new DateTime(1999, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1999, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dalila",
                            IsDeleted = false,
                            LastName = "Bajrić",
                            ModifiedAt = new DateTime(2024, 8, 15, 12, 35, 12, 550, DateTimeKind.Unspecified).AddTicks(5416),
                            ResidencePlace = "Bugojno"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.EmployeeArrangment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrangementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeArrangment", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ImageThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrangementPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArrangmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartureCityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reminder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementPriceId");

                    b.HasIndex("ArrangmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepartureCityId");

                    b.HasIndex("ReservationStatusId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Na čekanju"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Odbijeno"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Otkazano"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Potvrđeno"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Isteklo"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 3,
                            Name = "Vienna"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 3,
                            Name = "Graz"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Name = "Linz"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            Name = "Salzburg"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Innsbruck"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            Name = "Klagenfurt"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            Name = "Villach"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 3,
                            Name = "Wels"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            Name = "Sankt Pölten"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 3,
                            Name = "Dornbirn"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            Name = "Munich"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 4,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 4,
                            Name = "Hamburg"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 4,
                            Name = "Cologne"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 4,
                            Name = "Stuttgart"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 4,
                            Name = "Düsseldorf"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 4,
                            Name = "Dortmund"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 4,
                            Name = "Essen"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 4,
                            Name = "Leipzig"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 5,
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 5,
                            Name = "Milan"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 5,
                            Name = "Naples"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 5,
                            Name = "Turin"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 5,
                            Name = "Palermo"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 5,
                            Name = "Genoa"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 5,
                            Name = "Bologna"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 5,
                            Name = "Florence"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 5,
                            Name = "Bari"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 5,
                            Name = "Catania"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 6,
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 6,
                            Name = "Marseille"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 6,
                            Name = "Lyon"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 6,
                            Name = "Toulouse"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 6,
                            Name = "Nice"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 6,
                            Name = "Nantes"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 6,
                            Name = "Strasbourg"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 6,
                            Name = "Montpellier"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 6,
                            Name = "Bordeaux"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 6,
                            Name = "Lille"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 7,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 7,
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 7,
                            Name = "Valencia"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 7,
                            Name = "Seville"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 7,
                            Name = "Zaragoza"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 7,
                            Name = "Malaga"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 7,
                            Name = "Murcia"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 7,
                            Name = "Palma"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 7,
                            Name = "Las Palmas"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 7,
                            Name = "Bilbao"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 8,
                            Name = "Lisabon"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 8,
                            Name = "Porto"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 8,
                            Name = "Braga"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 8,
                            Name = "Funchal"
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 8,
                            Name = "Coimbra"
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 8,
                            Name = "Setúbal"
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 8,
                            Name = "Almada"
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 8,
                            Name = "Aveiro"
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 8,
                            Name = "Évora"
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 8,
                            Name = "Faro"
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 9,
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 9,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 9,
                            Name = "Izmir"
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 9,
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 9,
                            Name = "Adana"
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 9,
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 9,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 9,
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 9,
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = 70,
                            CountryId = 9,
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = 71,
                            CountryId = 10,
                            Name = "Athens"
                        },
                        new
                        {
                            Id = 72,
                            CountryId = 10,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            Id = 73,
                            CountryId = 10,
                            Name = "Patras"
                        },
                        new
                        {
                            Id = 74,
                            CountryId = 10,
                            Name = "Heraklion"
                        },
                        new
                        {
                            Id = 75,
                            CountryId = 10,
                            Name = "Larissa"
                        },
                        new
                        {
                            Id = 76,
                            CountryId = 10,
                            Name = "Volos"
                        },
                        new
                        {
                            Id = 77,
                            CountryId = 10,
                            Name = "Ioannina"
                        },
                        new
                        {
                            Id = 78,
                            CountryId = 10,
                            Name = "Trikala"
                        },
                        new
                        {
                            Id = 79,
                            CountryId = 10,
                            Name = "Chania"
                        },
                        new
                        {
                            Id = 80,
                            CountryId = 10,
                            Name = "Kavala"
                        },
                        new
                        {
                            Id = 81,
                            CountryId = 11,
                            Name = "Prague"
                        },
                        new
                        {
                            Id = 82,
                            CountryId = 11,
                            Name = "Brno"
                        },
                        new
                        {
                            Id = 83,
                            CountryId = 11,
                            Name = "Ostrava"
                        },
                        new
                        {
                            Id = 84,
                            CountryId = 11,
                            Name = "Plzen"
                        },
                        new
                        {
                            Id = 85,
                            CountryId = 11,
                            Name = "Liberec"
                        },
                        new
                        {
                            Id = 86,
                            CountryId = 11,
                            Name = "Olomouc"
                        },
                        new
                        {
                            Id = 87,
                            CountryId = 11,
                            Name = "Ústí nad Labem"
                        },
                        new
                        {
                            Id = 88,
                            CountryId = 11,
                            Name = "Hradec Králové"
                        },
                        new
                        {
                            Id = 89,
                            CountryId = 11,
                            Name = "Ceské Budejovice"
                        },
                        new
                        {
                            Id = 90,
                            CountryId = 11,
                            Name = "Pardubice"
                        },
                        new
                        {
                            Id = 91,
                            CountryId = 12,
                            Name = "Budapest"
                        },
                        new
                        {
                            Id = 92,
                            CountryId = 12,
                            Name = "Debrecen"
                        },
                        new
                        {
                            Id = 93,
                            CountryId = 12,
                            Name = "Szeged"
                        },
                        new
                        {
                            Id = 94,
                            CountryId = 12,
                            Name = "Miskolc"
                        },
                        new
                        {
                            Id = 95,
                            CountryId = 12,
                            Name = "Pécs"
                        },
                        new
                        {
                            Id = 96,
                            CountryId = 12,
                            Name = "Gyor"
                        },
                        new
                        {
                            Id = 97,
                            CountryId = 12,
                            Name = "Nyíregyháza"
                        },
                        new
                        {
                            Id = 98,
                            CountryId = 12,
                            Name = "Kecskemét"
                        },
                        new
                        {
                            Id = 99,
                            CountryId = 12,
                            Name = "Székesfehérvár"
                        },
                        new
                        {
                            Id = 100,
                            CountryId = 12,
                            Name = "Szombathely"
                        },
                        new
                        {
                            Id = 101,
                            CountryId = 1,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 102,
                            CountryId = 1,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 103,
                            CountryId = 1,
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 104,
                            CountryId = 1,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 105,
                            CountryId = 1,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 106,
                            CountryId = 1,
                            Name = "Bihac"
                        },
                        new
                        {
                            Id = 107,
                            CountryId = 1,
                            Name = "Brcko"
                        },
                        new
                        {
                            Id = 108,
                            CountryId = 1,
                            Name = "Travnik"
                        },
                        new
                        {
                            Id = 109,
                            CountryId = 1,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 110,
                            CountryId = 1,
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 111,
                            CountryId = 2,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 112,
                            CountryId = 2,
                            Name = "Split"
                        },
                        new
                        {
                            Id = 113,
                            CountryId = 2,
                            Name = "Rijeka"
                        },
                        new
                        {
                            Id = 114,
                            CountryId = 2,
                            Name = "Osijek"
                        },
                        new
                        {
                            Id = 115,
                            CountryId = 2,
                            Name = "Zadar"
                        },
                        new
                        {
                            Id = 116,
                            CountryId = 2,
                            Name = "Slavonski Brod"
                        },
                        new
                        {
                            Id = 117,
                            CountryId = 2,
                            Name = "Pula"
                        },
                        new
                        {
                            Id = 118,
                            CountryId = 2,
                            Name = "Karlovac"
                        },
                        new
                        {
                            Id = 119,
                            CountryId = 2,
                            Name = "Varaždin"
                        },
                        new
                        {
                            Id = 120,
                            CountryId = 2,
                            Name = "Sibenik"
                        },
                        new
                        {
                            Id = 121,
                            CountryId = 13,
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = 122,
                            CountryId = 5,
                            Name = "Venice"
                        },
                        new
                        {
                            Id = 123,
                            CountryId = 2,
                            Name = "Makarska"
                        },
                        new
                        {
                            Id = 124,
                            CountryId = 2,
                            Name = "Dubrovnik"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bosna"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Austrija"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Njemacka"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Italija"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Francuska"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Španija"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Turska"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Grcka"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ceška"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Madarska"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Nizozemska"
                        });
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.VerificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VerificationTokenType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationToken", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "40c09cc1-9733-4e1f-baad-6bbfa445e2d5",
                            Name = "Admin",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "40c09cc1-9733-4e1f-baad-6bbfa445e2d5",
                            Name = "Coordinator",
                            NormalizedName = "Coordinator"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "40c09cc1-9733-4e1f-baad-6bbfa445e2d5",
                            Name = "TouristGuide",
                            NormalizedName = "TouristGuide"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "40c09cc1-9733-4e1f-baad-6bbfa445e2d5",
                            Name = "Client",
                            NormalizedName = "Client"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Accommodation", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Address", "HotelAddress")
                        .WithMany("Accommodations")
                        .HasForeignKey("HotelAddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Accomadation_HotelAddress");

                    b.Navigation("HotelAddress");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Address", b =>
                {
                    b.HasOne("Iter.Core.EntityModelss.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Address_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Agency", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Address", "Address")
                        .WithMany("Agencies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Agency_Address");

                    b.HasOne("Iter.Core.EntityModels.Image", "Image")
                        .WithMany("Agencies")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Agency_Image");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Arrangement", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Agency", "Agency")
                        .WithMany("Arrangements")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Arrangement_Agency");

                    b.HasOne("Iter.Core.EntityModels.ArrangementStatus", "ArrangementStatus")
                        .WithMany("Arrangements")
                        .HasForeignKey("ArrangementStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Arrangement_ArrangementStatus");

                    b.Navigation("Agency");

                    b.Navigation("ArrangementStatus");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementImage", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Arrangement", "Arrangement")
                        .WithMany("ArrangementImages")
                        .HasForeignKey("ArrangementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ArrangementImage_Arrangement");

                    b.HasOne("Iter.Core.EntityModels.Image", "Image")
                        .WithMany("ArrangementImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ArrangementImage_Image");

                    b.Navigation("Arrangement");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementPrice", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Arrangement", "Arrangement")
                        .WithMany("ArrangementPrices")
                        .HasForeignKey("ArrangementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ArrangementPrice_Arrangement");

                    b.Navigation("Arrangement");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Destination", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Accommodation", "Accommodation")
                        .WithMany("Destinations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Destination_Accommodation");

                    b.HasOne("Iter.Core.EntityModels.Arrangement", "Arrangement")
                        .WithMany("Destinations")
                        .HasForeignKey("ArrangementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Destination_Arrangement");

                    b.HasOne("Iter.Core.EntityModelss.City", "City")
                        .WithMany("Destinations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Destination_City");

                    b.Navigation("Accommodation");

                    b.Navigation("Arrangement");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Employee", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Agency", "Agency")
                        .WithMany("Employees")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Agency");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.EmployeeArrangment", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Arrangement", "Arrangement")
                        .WithMany("EmployeeArrangments")
                        .HasForeignKey("ArrangementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeArrangment_Arrangement");

                    b.HasOne("Iter.Core.EntityModels.Employee", "Employee")
                        .WithMany("EmployeeArrangments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeArrangment_Employee");

                    b.Navigation("Arrangement");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Reservation", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.ArrangementPrice", "ArrangementPrice")
                        .WithMany("Reservations")
                        .HasForeignKey("ArrangementPriceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_ArrangementPrice");

                    b.HasOne("Iter.Core.EntityModels.Arrangement", "Arrangement")
                        .WithMany("Reservations")
                        .HasForeignKey("ArrangmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Arrangement");

                    b.HasOne("Iter.Core.EntityModels.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_Client");

                    b.HasOne("Iter.Core.EntityModelss.City", "DepartureCity")
                        .WithMany("Reservations")
                        .HasForeignKey("DepartureCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_DepartureCity");

                    b.HasOne("Iter.Core.EntityModels.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_ReservationStatus");

                    b.Navigation("Arrangement");

                    b.Navigation("ArrangementPrice");

                    b.Navigation("Client");

                    b.Navigation("DepartureCity");

                    b.Navigation("ReservationStatus");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.User", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.Client", "Client")
                        .WithOne("User")
                        .HasForeignKey("Iter.Core.EntityModels.User", "ClientId");

                    b.HasOne("Iter.Core.EntityModels.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("Iter.Core.EntityModels.User", "EmployeeId");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.City", b =>
                {
                    b.HasOne("Iter.Core.EntityModelss.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_City_Coutnry");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.VerificationToken", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_VerificationToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iter.Core.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Iter.Core.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Accommodation", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Address", b =>
                {
                    b.Navigation("Accommodations");

                    b.Navigation("Agencies");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Agency", b =>
                {
                    b.Navigation("Arrangements");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Arrangement", b =>
                {
                    b.Navigation("ArrangementImages");

                    b.Navigation("ArrangementPrices");

                    b.Navigation("Destinations");

                    b.Navigation("EmployeeArrangments");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementPrice", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.ArrangementStatus", b =>
                {
                    b.Navigation("Arrangements");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Client", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Employee", b =>
                {
                    b.Navigation("EmployeeArrangments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.Image", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("ArrangementImages");
                });

            modelBuilder.Entity("Iter.Core.EntityModels.User", b =>
                {
                    b.Navigation("VerificationTokens");
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.City", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Destinations");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Iter.Core.EntityModelss.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
